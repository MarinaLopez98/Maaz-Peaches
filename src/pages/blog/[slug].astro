---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '@layouts/Default.astro';
import { Card } from '@eliancodes/brutal-ui';
import BuyMeCoffee from '@components/generic/BuyMeCoffee.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map((blogpost) => ({
    params: { slug: blogpost.slug },
    props: { blogpost },
  }));
}

interface Props {
  blogpost: CollectionEntry<'blog'>;
}

const { blogpost } = Astro.props;
const { Content } = await blogpost.render();
const { title, description, author } = blogpost.data;
const pubDate = new Date(blogpost.data.pubDate);
---

<Layout title={title} description={description}>
  <main class='bg-#e4a6ca p-6'>
    <article class='max-w-4xl mx-auto'>
      <Card color='#ffffff'>
        <header class='mb-8'>
          <h1 class='text-3xl md:text-5xl lg:text-6xl mb-4 dm-serif'>{title}</h1>
          <div class='flex gap-4 text-sm poppins text-gray-600 mb-4'>
            <time datetime={pubDate.toISOString()}>
              {pubDate.toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' })}
            </time>
            <span>•</span>
            <span>{author}</span>
          </div>
          <div class='bg-gray-50 p-4 rounded-lg border-2 border-black mb-6'>
            <p class='poppins text-lg italic text-gray-700'>{description}</p>
          </div>
        </header>
        <div class='prose prose-lg max-w-none poppins'>
          <Content />
        </div>
        
        <!-- Comentarios ultra simple integrados -->
        <section style="margin: 3rem 0 2rem; padding: 2rem; background: linear-gradient(135deg, #fff5f9 0%, #fef9fb 100%); border: 3px solid #e8b4d4; border-radius: 1.5rem; box-shadow: 0 4px 12px rgba(232, 180, 212, 0.15);">
          <div style="text-align: center; margin-bottom: 2rem; padding-bottom: 1.5rem; border-bottom: 2px dashed #f5d4e6;">
            <h3 style="margin: 0 0 0.5rem 0; font-size: 1.75rem; font-weight: 700; color: #d87ba7; font-family: 'DM Serif Display', serif;">Comments</h3>
            <p style="margin: 0; font-size: 0.95rem; color: #9f7091; font-family: 'Poppins', sans-serif; font-style: italic; line-height: 1.6; max-width: 800px; margin: 0 auto;">Leave a comment below. Your thoughts are welcome.</p>
          </div>

          <div style="margin-bottom: 2rem;">
            <form id="commentForm" style="display: flex; flex-direction: column; gap: 1.25rem;">
              <input type="hidden" name="access_key" value="ac372efb-3a75-42da-9aa0-a90846659aa4">
              <input type="hidden" name="subject" value="New comment on blog">
              <input type="hidden" name="from_name" value="Blog Maaz-Peaches">
              <input type="hidden" name="redirect" value="false">

              <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                <label style="font-size: 0.9rem; font-weight: 600; color: #9f7091; font-family: 'Poppins', sans-serif;" for="name">Name</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Your name (or leave empty for anonymous)"
                  style="padding: 0.75rem 1rem; border: 2px solid #f5d4e6; border-radius: 0.75rem; font-size: 0.95rem; font-family: 'Poppins', sans-serif; background: #ffffff; color: #9f7091; transition: all 0.3s ease;"
                />
              </div>

              <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                <label style="font-size: 0.9rem; font-weight: 600; color: #9f7091; font-family: 'Poppins', sans-serif;" for="comment">Comment</label>
                <textarea
                  id="comment"
                  name="comment"
                  rows="4"
                  placeholder="Write your comment here..."
                  required
                  style="padding: 0.75rem 1rem; border: 2px solid #f5d4e6; border-radius: 0.75rem; font-size: 0.95rem; font-family: 'Poppins', sans-serif; background: #ffffff; color: #9f7091; transition: all 0.3s ease; resize: vertical; min-height: 100px;"
                ></textarea>
              </div>

              <button type="submit" style="display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; padding: 0.875rem 1.75rem; background: linear-gradient(135deg, #e8b4d4 0%, #f5d4e6 100%); color: #6b4a5a; border: 2px solid #d87ba7; border-radius: 0.875rem; font-size: 1rem; font-weight: 600; font-family: 'Poppins', sans-serif; cursor: pointer; transition: all 0.3s ease; box-shadow: 0 2px 8px rgba(232, 180, 212, 0.25); align-self: flex-start;">
                <span>Send comment</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <line x1="22" y1="2" x2="11" y2="13"></line>
                  <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                </svg>
              </button>
            </form>
          </div>

          <div id="commentsList" style="margin-top: 2rem; padding-top: 2rem; border-top: 2px dashed #f5d4e6;">
            <p style="text-align: center; color: #b89aa8; font-family: 'Poppins', sans-serif; font-size: 1rem; font-style: italic; margin: 1rem 0;">Be the first to comment</p>
          </div>
        </section>
        
        <BuyMeCoffee username="rollingpeaches" />
        
        <div class='flex justify-center mt-6'>
          <img 
            src='https://raw.githubusercontent.com/MarinaLopez98/Maaz-Peaches/master/src/assets/Peach.jpg' 
            alt='Ilustración Peach' 
            class='rounded-lg border-2 border-black shadow-lg'
            style='max-width: 300px; width: 100%;'
            loading='lazy'
          />
        </div>
        
      </Card>
    </article>
  </main>
</Layout>

<script>
  console.log('=== COMENTARIOS SCRIPT CARGADO ===');

  // Función básica de escape HTML
  function escapeHtml(text) {
    return text
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // Función para mostrar comentario
  function showComment(comentario) {
    console.log('Mostrando comentario:', comentario.nombre);

    const div = document.createElement('div');
    div.className = 'comment-item';

    const fecha = new Date(comentario.fecha);
    const fechaTexto = fecha.toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    // HTML para respuestas
    let respuestasHTML = '';
    if (comentario.respuestas && comentario.respuestas.length > 0) {
      respuestasHTML = '<div style="margin-top: 1rem; margin-left: 2rem; padding-left: 1rem; border-left: 3px solid #f5d4e6;">';
      comentario.respuestas.forEach(respuesta => {
        const fechaResp = new Date(respuesta.fecha);
        const fechaRespTexto = fechaResp.toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        respuestasHTML += `
          <div style="padding: 1rem; margin-bottom: 0.75rem; background: linear-gradient(135deg, #fef9fb 0%, #fff 100%); border: 2px solid #f9e8f0; border-radius: 0.875rem;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding-bottom: 0.75rem; border-bottom: 1px solid #f9e8f0;">
              <span style="font-weight: 600; color: #d87ba7; font-family: 'Poppins', sans-serif; font-size: 0.9rem;">${escapeHtml(respuesta.nombre)}</span>
              <span style="font-size: 0.75rem; color: #c4a5b4; font-family: 'Poppins', sans-serif;">${fechaRespTexto}</span>
            </div>
            <p style="color: #9f7091; font-family: 'Poppins', sans-serif; font-size: 0.9rem; line-height: 1.5; margin: 0;">${escapeHtml(respuesta.texto)}</p>
          </div>
        `;
      });
      respuestasHTML += '</div>';
    }

    // Formulario de respuesta
    const replyFormHTML = `
      <div id="reply-form-${comentario.id}" style="margin-top: 1rem; padding: 1rem; background: linear-gradient(135deg, #fef9fb 0%, #fff 100%); border: 2px dashed #f5d4e6; border-radius: 0.875rem; display: none;">
        <div style="font-size: 0.9rem; font-weight: 600; color: #9f7091; margin-bottom: 0.75rem; font-family: 'Poppins', sans-serif;">Replying to ${escapeHtml(comentario.nombre)}</div>
        <div style="display: flex; flex-direction: column; gap: 0.5rem; margin-bottom: 0.75rem;">
          <label style="font-size: 0.85rem; font-weight: 600; color: #9f7091; font-family: 'Poppins', sans-serif;" for="reply-name-${comentario.id}">Name</label>
          <input type="text" id="reply-name-${comentario.id}" placeholder="Your name (or leave empty)" style="padding: 0.5rem 0.75rem; border: 1.5px solid #f5d4e6; border-radius: 0.5rem; font-size: 0.9rem; font-family: 'Poppins', sans-serif; background: #ffffff; color: #9f7091;">
        </div>
        <div style="display: flex; flex-direction: column; gap: 0.5rem; margin-bottom: 0.75rem;">
          <label style="font-size: 0.85rem; font-weight: 600; color: #9f7091; font-family: 'Poppins', sans-serif;" for="reply-text-${comentario.id}">Reply</label>
          <textarea id="reply-text-${comentario.id}" rows="3" placeholder="Write your reply here..." required style="padding: 0.5rem 0.75rem; border: 1.5px solid #f5d4e6; border-radius: 0.5rem; font-size: 0.9rem; font-family: 'Poppins', sans-serif; background: #ffffff; color: #9f7091; resize: vertical;"></textarea>
        </div>
        <div style="display: flex; gap: 0.5rem;">
          <button onclick="submitReply('${comentario.id}')" style="padding: 0.5rem 1rem; font-size: 0.85rem; background: linear-gradient(135deg, #e8b4d4 0%, #f5d4e6 100%); color: #6b4a5a; border: 1.5px solid #d87ba7; border-radius: 0.5rem; font-weight: 600; font-family: 'Poppins', sans-serif; cursor: pointer;">Send reply</button>
          <button onclick="hideReplyForm('${comentario.id}')" style="padding: 0.5rem 1rem; font-size: 0.85rem; background: #fff; color: #9f7091; border: 1.5px solid #f5d4e6; border-radius: 0.5rem; font-weight: 500; font-family: 'Poppins', sans-serif; cursor: pointer;">Cancel</button>
        </div>
      </div>
    `;

    div.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.75rem; padding-bottom: 0.75rem; border-bottom: 1px solid #f5d4e6;">
        <span style="font-weight: 600; color: #d87ba7; font-family: 'Poppins', sans-serif; font-size: 0.95rem;">${escapeHtml(comentario.nombre)}</span>
        <span style="font-size: 0.8rem; color: #b89aa8; font-family: 'Poppins', sans-serif;">${fechaTexto}</span>
      </div>
      <p style="color: #9f7091; font-family: 'Poppins', sans-serif; font-size: 0.95rem; line-height: 1.6; margin: 0 0 0.75rem 0;">${escapeHtml(comentario.texto)}</p>
      <button onclick="showReplyForm('${comentario.id}')" style="display: inline-flex; align-items: center; gap: 0.4rem; padding: 0.45rem 0.9rem; background: linear-gradient(135deg, #fef9fb 0%, #fff5f9 100%); color: #d87ba7; border: 1.5px solid #f5d4e6; border-radius: 0.6rem; font-size: 0.85rem; font-weight: 500; font-family: 'Poppins', sans-serif; cursor: pointer; transition: all 0.3s ease; letter-spacing: 0.5px;">
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 10 4 15 9 20"></polyline>
          <path d="M20 4v7a4 4 0 0 1-4 4H4"></path>
        </svg>
        R e p l y
      </button>
      ${replyFormHTML}
      ${respuestasHTML}
    `;

    div.style.cssText = 'padding: 1.25rem; margin-bottom: 1rem; background: #ffffff; border: 2px solid #f5d4e6; border-radius: 1rem; transition: all 0.3s ease;';

    const commentsList = document.getElementById('commentsList');
    if (commentsList) {
      commentsList.appendChild(div);
      console.log('Comentario agregado al DOM');
    }
  }

  // Función para guardar comentario
  function saveComment(comentario) {
    const clave = 'comments_' + window.location.pathname;
    const comentarios = JSON.parse(localStorage.getItem(clave) || '[]');
    comentarios.push(comentario);
    localStorage.setItem(clave, JSON.stringify(comentarios));
    console.log('Comentario guardado en localStorage');
  }

  // Función para cargar comentarios
  function loadComments() {
    console.log('Cargando comentarios...');
    const clave = 'comments_' + window.location.pathname;
    let comentarios = JSON.parse(localStorage.getItem(clave) || '[]');

    // Migrar comentarios antiguos sin ID
    comentarios = comentarios.map((c, i) => {
      if (!c.id) {
        return {
          id: 'migrated-' + Date.now() + '-' + i,
          nombre: c.nombre || 'Anonymous',
          texto: c.texto || '',
          fecha: c.fecha || new Date().toISOString(),
          respuestas: []
        };
      }
      if (!c.respuestas) c.respuestas = [];
      return c;
    });

    // Guardar versión migrada
    localStorage.setItem(clave, JSON.stringify(comentarios));

    const commentsList = document.getElementById('commentsList');
    if (commentsList && comentarios.length > 0) {
      commentsList.innerHTML = '';
      comentarios.forEach(showComment);
    }

    console.log('Comentarios cargados:', comentarios.length);
  }

  // Función para enviar email
  function sendEmail(comentario) {
    console.log('Enviando email...');

    const formData = new FormData();
    formData.append('access_key', 'ac372efb-3a75-42da-9aa0-a90846659aa4');
    formData.append('subject', 'New comment on blog');
    formData.append('from_name', 'Blog Maaz-Peaches');
    formData.append('name', comentario.nombre);
    formData.append('comment', comentario.texto);
    formData.append('page_url', window.location.href);
    formData.append('redirect', 'false');

    fetch('https://api.web3forms.com/submit', {
      method: 'POST',
      body: formData
    })
    .then(response => {
      console.log('Email enviado exitosamente');
      return response.json();
    })
    .then(data => console.log('Respuesta email:', data))
    .catch(error => {
      console.warn('Error enviando email:', error);
    });
  }

  // Inicializar cuando todo esté listo
  function initComments() {
    console.log('=== INICIALIZANDO COMENTARIOS ===');

    const form = document.getElementById('commentForm');
    const commentsList = document.getElementById('commentsList');

    console.log('Form element:', form);
    console.log('CommentsList element:', commentsList);

    if (!form) {
      console.error('ERROR: Form no encontrado');
      return;
    }

    if (!commentsList) {
      console.error('ERROR: Comments list no encontrada');
      return;
    }

    console.log('SUCCESS: Todos los elementos encontrados');
    console.log('Configurando event listener...');

    // Cargar comentarios existentes
    loadComments();

    // Manejar envío del formulario
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      console.log('=== FORMULARIO ENVIADO ===');

      const nombre = document.getElementById('name')?.value?.trim() || 'Anonymous';
      const texto = document.getElementById('comment')?.value?.trim();

      console.log('Nombre:', nombre);
      console.log('Texto:', texto);

      if (!texto) {
        alert('Please write a comment');
        return;
      }

      // Crear comentario
      const comentario = {
        id: Date.now().toString(),
        nombre: nombre,
        texto: texto,
        fecha: new Date().toISOString(),
        respuestas: []
      };

      console.log('Comentario creado:', comentario);

      // Mostrar inmediatamente
      showComment(comentario);

      // Guardar en localStorage
      saveComment(comentario);

      // Limpiar formulario
      form.reset();

      // Enviar email en segundo plano
      sendEmail(comentario);

      console.log('=== COMENTARIO PROCESADO ===');
    });

    console.log('=== SISTEMA LISTO ===');
  }

  // Funciones globales para respuestas
  window.showReplyForm = function(commentId) {
    console.log('Mostrando formulario de respuesta para:', commentId);

    // Ocultar otros formularios abiertos
    document.querySelectorAll('[id^="reply-form-"]').forEach(form => {
      form.style.display = 'none';
    });

    // Mostrar este formulario
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    if (replyForm) {
      replyForm.style.display = 'block';
      const textarea = document.getElementById(`reply-text-${commentId}`);
      if (textarea) {
        textarea.focus();
      }
    }
  };

  window.hideReplyForm = function(commentId) {
    console.log('Ocultando formulario de respuesta para:', commentId);
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    if (replyForm) {
      replyForm.style.display = 'none';
      // Limpiar campos
      const nameInput = document.getElementById(`reply-name-${commentId}`);
      const textInput = document.getElementById(`reply-text-${commentId}`);
      if (nameInput) nameInput.value = '';
      if (textInput) textInput.value = '';
    }
  };

  window.submitReply = function(commentId) {
    console.log('Enviando respuesta para:', commentId);

    const nameInput = document.getElementById(`reply-name-${commentId}`);
    const textInput = document.getElementById(`reply-text-${commentId}`);

    const nombre = nameInput?.value?.trim() || 'Anonymous';
    const texto = textInput?.value?.trim();

    if (!texto) {
      alert('Please write a reply');
      return;
    }

    console.log('Procesando respuesta:', nombre, texto);

    // Guardar respuesta en localStorage
    const clave = 'comments_' + window.location.pathname;
    const comentarios = JSON.parse(localStorage.getItem(clave) || '[]');

    const comentarioIndex = comentarios.findIndex(c => c.id === commentId);
    if (comentarioIndex !== -1) {
      if (!comentarios[comentarioIndex].respuestas) {
        comentarios[comentarioIndex].respuestas = [];
      }

      const respuesta = {
        id: Date.now().toString(),
        nombre: nombre,
        texto: texto,
        fecha: new Date().toISOString()
      };

      comentarios[comentarioIndex].respuestas.push(respuesta);
      localStorage.setItem(clave, JSON.stringify(comentarios));

      // Recargar comentarios para mostrar la nueva respuesta
      const commentsList = document.getElementById('commentsList');
      if (commentsList) {
        commentsList.innerHTML = '';
        comentarios.forEach(showComment);
      }

      console.log('Respuesta guardada y mostrada');
    }
  };

  // Usar window.onload para máxima compatibilidad
  window.addEventListener('load', function() {
    console.log('Window loaded, inicializando comentarios...');
    initComments();
  });

  console.log('=== SCRIPT DE COMENTARIOS CARGADO ===');
</script>
