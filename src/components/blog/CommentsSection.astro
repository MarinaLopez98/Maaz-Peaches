---
// Componente de secci√≥n de comentarios est√©tica
---

<section class="comments-section">
  <div class="comments-header">
    <h3 class="comments-title">Comentarios</h3>
    <p class="comments-subtitle">Si no te sientes escuchado, aqu√≠ tienes el espacio perfecto. No te escucharemos, pero ten por seguro que te leer√©.</p>
  </div>

  <div class="comment-form-container">
    <form class="comment-form" id="commentForm">
      <input type="hidden" name="access_key" value="ac372efb-3a75-42da-9aa0-a90846659aa4">
      <input type="hidden" name="subject" value="üí¨ Nuevo comentario en el blog">
      <input type="hidden" name="from_name" value="Blog Maaz-Peaches">
      <input type="hidden" name="page_url" id="pageUrlInput">
      <input type="checkbox" name="botcheck" style="display: none;">
      
      <div class="form-group">
        <label for="name">Nombre</label>
        <input 
          type="text" 
          id="name" 
          name="name" 
          placeholder="Tu nombre (o d√©jalo vac√≠o para comentar an√≥nimamente)" 
        />
      </div>
      
      <div class="form-group">
        <label for="comment">Comentario</label>
        <textarea 
          id="comment" 
          name="comment" 
          rows="4" 
          placeholder="Escribe tu comentario aqu√≠..." 
          required
        ></textarea>
      </div>
      
      <button type="submit" class="submit-button">
        <span class="button-text">Enviar comentario</span>
        <svg class="button-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </form>
  </div>

  <div class="comments-list" id="commentsList">
  </div>
</section>

<style>
  .comments-section {
    margin: 3rem 0 2rem;
    padding: 2rem;
    background: linear-gradient(135deg, #fff5f9 0%, #fef9fb 100%);
    border: 3px solid #e8b4d4;
    border-radius: 1.5rem;
    box-shadow: 0 4px 12px rgba(232, 180, 212, 0.15);
  }

  .comments-header {
    text-align: center;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px dashed #f5d4e6;
  }

  .comments-title {
    margin: 0 0 0.5rem 0;
    font-size: 1.75rem;
    font-weight: 700;
    color: #d87ba7;
    font-family: 'DM Serif Display', serif;
  }

  .comments-subtitle {
    margin: 0;
    font-size: 0.95rem;
    color: #9f7091;
    font-family: 'Poppins', sans-serif;
    font-style: italic;
    line-height: 1.6;
    max-width: 800px;
    margin: 0 auto;
  }

  .comment-form-container {
    margin-bottom: 2rem;
  }

  .comment-form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    font-size: 0.9rem;
    font-weight: 600;
    color: #9f7091;
    font-family: 'Poppins', sans-serif;
  }

  .form-group input,
  .form-group textarea {
    padding: 0.75rem 1rem;
    border: 2px solid #f5d4e6;
    border-radius: 0.75rem;
    font-size: 0.95rem;
    font-family: 'Poppins', sans-serif;
    background: #ffffff;
    color: #4a4a4a;
    transition: all 0.3s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #e8b4d4;
    box-shadow: 0 0 0 3px rgba(232, 180, 212, 0.15);
  }

  .form-group input::placeholder,
  .form-group textarea::placeholder {
    color: #c4a5b4;
  }

  .form-group textarea {
    resize: vertical;
    min-height: 100px;
  }

  .submit-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.875rem 1.75rem;
    background: linear-gradient(135deg, #e8b4d4 0%, #f5d4e6 100%);
    color: #6b4a5a;
    border: 2px solid #d87ba7;
    border-radius: 0.875rem;
    font-size: 1rem;
    font-weight: 600;
    font-family: 'Poppins', sans-serif;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(232, 180, 212, 0.25);
    align-self: flex-start;
  }

  .submit-button:hover {
    background: linear-gradient(135deg, #d87ba7 0%, #e8b4d4 100%);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(232, 180, 212, 0.35);
  }

  .submit-button:active {
    transform: translateY(0);
  }

  .button-icon {
    flex-shrink: 0;
  }

  .comments-list {
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 2px dashed #f5d4e6;
  }

  .comment-item {
    padding: 1.25rem;
    margin-bottom: 1rem;
    background: #ffffff;
    border: 2px solid #f5d4e6;
    border-radius: 1rem;
    transition: all 0.3s ease;
  }

  .comment-item:hover {
    border-color: #e8b4d4;
    box-shadow: 0 2px 8px rgba(232, 180, 212, 0.15);
  }

  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid #f5d4e6;
  }

  .comment-author {
    font-weight: 600;
    color: #d87ba7;
    font-family: 'Poppins', sans-serif;
    font-size: 0.95rem;
  }

  .comment-date {
    font-size: 0.8rem;
    color: #b89aa8;
    font-family: 'Poppins', sans-serif;
  }

  .comment-text {
    color: #4a4a4a;
    font-family: 'Poppins', sans-serif;
    font-size: 0.95rem;
    line-height: 1.6;
    margin: 0 0 0.75rem 0;
  }

  .comment-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .reply-button {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.35rem 0.75rem;
    background: linear-gradient(135deg, #fef9fb 0%, #fff5f9 100%);
    color: #d87ba7;
    border: 1.5px solid #f5d4e6;
    border-radius: 0.5rem;
    font-size: 0.85rem;
    font-weight: 500;
    font-family: 'Poppins', sans-serif;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .reply-button:hover {
    background: linear-gradient(135deg, #f5d4e6 0%, #e8b4d4 100%);
    border-color: #e8b4d4;
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(232, 180, 212, 0.2);
  }

  .reply-button:active {
    transform: translateY(0);
  }

  .replies-container {
    margin-top: 1rem;
    margin-left: 2rem;
    padding-left: 1rem;
    border-left: 3px solid #f5d4e6;
  }

  .reply-item {
    padding: 1rem;
    margin-bottom: 0.75rem;
    background: linear-gradient(135deg, #fef9fb 0%, #fff 100%);
    border: 2px solid #f9e8f0;
    border-radius: 0.875rem;
    transition: all 0.3s ease;
  }

  .reply-item:hover {
    border-color: #f5d4e6;
    box-shadow: 0 1px 6px rgba(232, 180, 212, 0.1);
  }

  .reply-form {
    margin-top: 1rem;
    padding: 1rem;
    background: linear-gradient(135deg, #fef9fb 0%, #fff 100%);
    border: 2px dashed #f5d4e6;
    border-radius: 0.875rem;
    display: none;
  }

  .reply-form.active {
    display: block;
    animation: slideDown 0.3s ease;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .reply-form-header {
    font-size: 0.9rem;
    font-weight: 600;
    color: #9f7091;
    margin-bottom: 0.75rem;
    font-family: 'Poppins', sans-serif;
  }

  .cancel-reply {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.35rem 0.75rem;
    background: #fff;
    color: #9f7091;
    border: 1.5px solid #f5d4e6;
    border-radius: 0.5rem;
    font-size: 0.85rem;
    font-weight: 500;
    font-family: 'Poppins', sans-serif;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .cancel-reply:hover {
    background: #fef9fb;
    border-color: #e8b4d4;
  }

  @media (max-width: 640px) {
    .comments-section {
      padding: 1.5rem;
      margin: 2rem 0 1.5rem;
    }

    .comments-title {
      font-size: 1.5rem;
    }

    .comments-subtitle {
      font-size: 0.85rem;
      padding: 0 0.5rem;
    }

    .submit-button {
      width: 100%;
    }

    .replies-container {
      margin-left: 1rem;
      padding-left: 0.5rem;
    }

    .reply-item {
      padding: 0.75rem;
    }
  }
</style>

<script>
  // Funcionalidad con sistema de respuestas
  const commentForm = document.getElementById('commentForm') as HTMLFormElement;
  const commentsList = document.getElementById('commentsList') as HTMLElement;

  interface Reply {
    id: string;
    name: string;
    text: string;
    date: string;
  }

  interface Comment {
    id: string;
    name: string;
    text: string;
    date: string;
    replies: Reply[];
  }

  // Cargar comentarios guardados del localStorage
  function loadComments() {
    const pageSlug = window.location.pathname;
    const savedComments = localStorage.getItem(`comments_${pageSlug}`);
    
    if (savedComments) {
      const comments: Comment[] = JSON.parse(savedComments);
      if (comments.length > 0) {
        commentsList.innerHTML = '';
        comments.forEach((comment: Comment) => {
          addCommentToDOM(comment);
        });
      }
    }
  }

  function addCommentToDOM(comment: Comment) {
    const commentElement = document.createElement('div');
    commentElement.className = 'comment-item';
    commentElement.dataset.commentId = comment.id;
    
    let repliesHTML = '';
    if (comment.replies && comment.replies.length > 0) {
      repliesHTML = '<div class="replies-container">';
      comment.replies.forEach((reply: Reply) => {
        repliesHTML += `
          <div class="reply-item">
            <div class="comment-header">
              <span class="comment-author">${escapeHtml(reply.name)}</span>
              <span class="comment-date">${formatDate(reply.date)}</span>
            </div>
            <p class="comment-text">${escapeHtml(reply.text)}</p>
          </div>
        `;
      });
      repliesHTML += '</div>';
    }
    
    commentElement.innerHTML = `
      <div class="comment-header">
        <span class="comment-author">${escapeHtml(comment.name)}</span>
        <span class="comment-date">${formatDate(comment.date)}</span>
      </div>
      <p class="comment-text">${escapeHtml(comment.text)}</p>
      <div class="comment-actions">
        <button class="reply-button" onclick="showReplyForm('${comment.id}')">
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 10 4 15 9 20"></polyline>
            <path d="M20 4v7a4 4 0 0 1-4 4H4"></path>
          </svg>
          Responder
        </button>
      </div>
      <div class="reply-form" id="reply-form-${comment.id}">
        <div class="reply-form-header">Respondiendo a ${escapeHtml(comment.name)}</div>
        <div class="form-group">
          <label for="reply-name-${comment.id}">Nombre</label>
          <input 
            type="text" 
            id="reply-name-${comment.id}" 
            placeholder="Tu nombre (o d√©jalo vac√≠o para comentar an√≥nimamente)" 
          />
        </div>
        <div class="form-group">
          <label for="reply-text-${comment.id}">Respuesta</label>
          <textarea 
            id="reply-text-${comment.id}" 
            rows="3" 
            placeholder="Escribe tu respuesta aqu√≠..." 
            required
          ></textarea>
        </div>
        <div style="display: flex; gap: 0.5rem; margin-top: 0.75rem;">
          <button class="submit-button" onclick="submitReply('${comment.id}')" style="padding: 0.65rem 1.25rem; font-size: 0.9rem;">
            <span class="button-text">Enviar respuesta</span>
          </button>
          <button class="cancel-reply" onclick="hideReplyForm('${comment.id}')">
            Cancelar
          </button>
        </div>
      </div>
      ${repliesHTML}
    `;
    commentsList.appendChild(commentElement);
  }

  function formatDate(date: string): string {
    return new Date(date).toLocaleDateString('es-ES', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  function escapeHtml(unsafe: string): string {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // Funciones globales para los botones
  (window as any).showReplyForm = (commentId: string) => {
    // Ocultar otros formularios de respuesta abiertos
    document.querySelectorAll('.reply-form.active').forEach(form => {
      form.classList.remove('active');
    });
    
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    if (replyForm) {
      replyForm.classList.add('active');
      const textarea = document.getElementById(`reply-text-${commentId}`) as HTMLTextAreaElement;
      if (textarea) {
        textarea.focus();
      }
    }
  };

  (window as any).hideReplyForm = (commentId: string) => {
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    if (replyForm) {
      replyForm.classList.remove('active');
      // Limpiar campos
      const nameInput = document.getElementById(`reply-name-${commentId}`) as HTMLInputElement;
      const textInput = document.getElementById(`reply-text-${commentId}`) as HTMLTextAreaElement;
      if (nameInput) nameInput.value = '';
      if (textInput) textInput.value = '';
    }
  };

  (window as any).submitReply = async (commentId: string) => {
    const nameInput = document.getElementById(`reply-name-${commentId}`) as HTMLInputElement;
    const textInput = document.getElementById(`reply-text-${commentId}`) as HTMLTextAreaElement;
    
    let name = nameInput?.value || '';
    const text = textInput?.value || '';
    
    if (!text.trim()) {
      alert('Por favor, escribe una respuesta antes de enviar.');
      return;
    }
    
    if (!name.trim()) {
      name = 'An√≥nimo';
    }
    
    const date = new Date().toISOString();
    const replyId = Date.now().toString();
    
    // Guardar respuesta en localStorage
    const pageSlug = window.location.pathname;
    const savedComments = localStorage.getItem(`comments_${pageSlug}`);
    const comments: Comment[] = savedComments ? JSON.parse(savedComments) : [];
    
    const commentIndex = comments.findIndex(c => c.id === commentId);
    if (commentIndex !== -1) {
      if (!comments[commentIndex].replies) {
        comments[commentIndex].replies = [];
      }
      comments[commentIndex].replies.push({ id: replyId, name, text, date });
      localStorage.setItem(`comments_${pageSlug}`, JSON.stringify(comments));
      
      // Recargar comentarios para mostrar la nueva respuesta
      loadComments();
      
      // Intentar enviar email en segundo plano
      const formData = new FormData();
      formData.append('access_key', 'ac372efb-3a75-42da-9aa0-a90846659aa4');
      formData.append('subject', 'üí¨ Nueva respuesta en el blog');
      formData.append('from_name', 'Blog Maaz-Peaches');
      formData.append('name', name);
      formData.append('comment', `Respuesta a: "${comments[commentIndex].text}"\n\n${text}`);
      formData.append('page_url', window.location.href);
      
      fetch('https://api.web3forms.com/submit', {
        method: 'POST',
        body: formData,
        headers: { 'Accept': 'application/json' }
      }).then(response => response.json())
        .then(result => console.log('Email de respuesta enviado:', result))
        .catch(error => console.warn('Error al enviar email de respuesta:', error));
    }
  };

  // Establecer la URL de la p√°gina en el campo oculto
  const pageUrlInput = document.getElementById('pageUrlInput') as HTMLInputElement;
  if (pageUrlInput) {
    pageUrlInput.value = window.location.href;
  }

  if (commentForm) {
    commentForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(commentForm);
      let name = formData.get('name') as string;
      const comment = formData.get('comment') as string;
      
      // Validar que el comentario no est√© vac√≠o
      if (!comment || comment.trim() === '') {
        alert('Por favor, escribe un comentario antes de enviar.');
        return;
      }
      
      // Si no hay nombre, usar "An√≥nimo"
      const isAnonymous = !name || name.trim() === '';
      if (isAnonymous) {
        name = 'An√≥nimo';
        formData.set('name', 'An√≥nimo');
      }
      
      const date = new Date().toISOString();
      const commentId = Date.now().toString();

      // Deshabilitar el bot√≥n de env√≠o mientras se procesa
      const submitButton = commentForm.querySelector('button[type="submit"]') as HTMLButtonElement;
      const originalButtonText = submitButton.innerHTML;
      submitButton.disabled = true;
      submitButton.innerHTML = '<span class="button-text">Enviando...</span>';

      // Guardar en localStorage (por p√°gina) PRIMERO
      const pageSlug = window.location.pathname;
      const savedComments = localStorage.getItem(`comments_${pageSlug}`);
      const comments: Comment[] = savedComments ? JSON.parse(savedComments) : [];
      
      const newComment: Comment = { 
        id: commentId, 
        name, 
        text: comment, 
        date,
        replies: []
      };
      comments.push(newComment);
      localStorage.setItem(`comments_${pageSlug}`, JSON.stringify(comments));

      // A√±adir comentario al DOM inmediatamente
      addCommentToDOM(newComment);

      // Limpiar formulario
      commentForm.reset();
      
      // Restaurar el bot√≥n
      submitButton.disabled = false;
      submitButton.innerHTML = originalButtonText;
      
      // Scroll suave al nuevo comentario
      setTimeout(() => {
        const lastComment = commentsList.lastElementChild;
        if (lastComment) {
          lastComment.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
      }, 100);

      // Intentar enviar email en segundo plano (sin bloquear la UI)
      fetch('https://api.web3forms.com/submit', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        }
      }).then(response => response.json())
        .then(result => {
          console.log('Email enviado correctamente:', result);
        })
        .catch(error => {
          console.warn('No se pudo enviar el email, pero el comentario se guard√≥ localmente:', error);
        });
    });
  }

  // Cargar comentarios al cargar la p√°gina
  loadComments();
</script>
